# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_OpenPosePython')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_OpenPosePython')
    _OpenPosePython = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_OpenPosePython', [dirname(__file__)])
        except ImportError:
            import _OpenPosePython
            return _OpenPosePython
        try:
            _mod = imp.load_module('_OpenPosePython', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _OpenPosePython = swig_import_helper()
    del swig_import_helper
else:
    import _OpenPosePython
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _OpenPosePython.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _OpenPosePython.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _OpenPosePython.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _OpenPosePython.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _OpenPosePython.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _OpenPosePython.SwigPyIterator_equal(self, x)

    def copy(self):
        return _OpenPosePython.SwigPyIterator_copy(self)

    def next(self):
        return _OpenPosePython.SwigPyIterator_next(self)

    def __next__(self):
        return _OpenPosePython.SwigPyIterator___next__(self)

    def previous(self):
        return _OpenPosePython.SwigPyIterator_previous(self)

    def advance(self, n):
        return _OpenPosePython.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _OpenPosePython.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _OpenPosePython.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _OpenPosePython.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _OpenPosePython.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _OpenPosePython.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _OpenPosePython.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _OpenPosePython.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _OpenPosePython.SHARED_PTR_DISOWN
class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _OpenPosePython.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _OpenPosePython.IntVector___nonzero__(self)

    def __bool__(self):
        return _OpenPosePython.IntVector___bool__(self)

    def __len__(self):
        return _OpenPosePython.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _OpenPosePython.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _OpenPosePython.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _OpenPosePython.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _OpenPosePython.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _OpenPosePython.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _OpenPosePython.IntVector___setitem__(self, *args)

    def pop(self):
        return _OpenPosePython.IntVector_pop(self)

    def append(self, x):
        return _OpenPosePython.IntVector_append(self, x)

    def empty(self):
        return _OpenPosePython.IntVector_empty(self)

    def size(self):
        return _OpenPosePython.IntVector_size(self)

    def swap(self, v):
        return _OpenPosePython.IntVector_swap(self, v)

    def begin(self):
        return _OpenPosePython.IntVector_begin(self)

    def end(self):
        return _OpenPosePython.IntVector_end(self)

    def rbegin(self):
        return _OpenPosePython.IntVector_rbegin(self)

    def rend(self):
        return _OpenPosePython.IntVector_rend(self)

    def clear(self):
        return _OpenPosePython.IntVector_clear(self)

    def get_allocator(self):
        return _OpenPosePython.IntVector_get_allocator(self)

    def pop_back(self):
        return _OpenPosePython.IntVector_pop_back(self)

    def erase(self, *args):
        return _OpenPosePython.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _OpenPosePython.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _OpenPosePython.IntVector_push_back(self, x)

    def front(self):
        return _OpenPosePython.IntVector_front(self)

    def back(self):
        return _OpenPosePython.IntVector_back(self)

    def assign(self, n, x):
        return _OpenPosePython.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _OpenPosePython.IntVector_resize(self, *args)

    def insert(self, *args):
        return _OpenPosePython.IntVector_insert(self, *args)

    def reserve(self, n):
        return _OpenPosePython.IntVector_reserve(self, n)

    def capacity(self):
        return _OpenPosePython.IntVector_capacity(self)
    __swig_destroy__ = _OpenPosePython.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _OpenPosePython.IntVector_swigregister
IntVector_swigregister(IntVector)

class IntVectorVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVectorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVectorVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _OpenPosePython.IntVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _OpenPosePython.IntVectorVector___nonzero__(self)

    def __bool__(self):
        return _OpenPosePython.IntVectorVector___bool__(self)

    def __len__(self):
        return _OpenPosePython.IntVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _OpenPosePython.IntVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _OpenPosePython.IntVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _OpenPosePython.IntVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _OpenPosePython.IntVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _OpenPosePython.IntVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _OpenPosePython.IntVectorVector___setitem__(self, *args)

    def pop(self):
        return _OpenPosePython.IntVectorVector_pop(self)

    def append(self, x):
        return _OpenPosePython.IntVectorVector_append(self, x)

    def empty(self):
        return _OpenPosePython.IntVectorVector_empty(self)

    def size(self):
        return _OpenPosePython.IntVectorVector_size(self)

    def swap(self, v):
        return _OpenPosePython.IntVectorVector_swap(self, v)

    def begin(self):
        return _OpenPosePython.IntVectorVector_begin(self)

    def end(self):
        return _OpenPosePython.IntVectorVector_end(self)

    def rbegin(self):
        return _OpenPosePython.IntVectorVector_rbegin(self)

    def rend(self):
        return _OpenPosePython.IntVectorVector_rend(self)

    def clear(self):
        return _OpenPosePython.IntVectorVector_clear(self)

    def get_allocator(self):
        return _OpenPosePython.IntVectorVector_get_allocator(self)

    def pop_back(self):
        return _OpenPosePython.IntVectorVector_pop_back(self)

    def erase(self, *args):
        return _OpenPosePython.IntVectorVector_erase(self, *args)

    def __init__(self, *args):
        this = _OpenPosePython.new_IntVectorVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _OpenPosePython.IntVectorVector_push_back(self, x)

    def front(self):
        return _OpenPosePython.IntVectorVector_front(self)

    def back(self):
        return _OpenPosePython.IntVectorVector_back(self)

    def assign(self, n, x):
        return _OpenPosePython.IntVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _OpenPosePython.IntVectorVector_resize(self, *args)

    def insert(self, *args):
        return _OpenPosePython.IntVectorVector_insert(self, *args)

    def reserve(self, n):
        return _OpenPosePython.IntVectorVector_reserve(self, n)

    def capacity(self):
        return _OpenPosePython.IntVectorVector_capacity(self)
    __swig_destroy__ = _OpenPosePython.delete_IntVectorVector
    __del__ = lambda self: None
IntVectorVector_swigregister = _OpenPosePython.IntVectorVector_swigregister
IntVectorVector_swigregister(IntVectorVector)

class IntVectorVectorVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVectorVectorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVectorVectorVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _OpenPosePython.IntVectorVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _OpenPosePython.IntVectorVectorVector___nonzero__(self)

    def __bool__(self):
        return _OpenPosePython.IntVectorVectorVector___bool__(self)

    def __len__(self):
        return _OpenPosePython.IntVectorVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _OpenPosePython.IntVectorVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _OpenPosePython.IntVectorVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _OpenPosePython.IntVectorVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _OpenPosePython.IntVectorVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _OpenPosePython.IntVectorVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _OpenPosePython.IntVectorVectorVector___setitem__(self, *args)

    def pop(self):
        return _OpenPosePython.IntVectorVectorVector_pop(self)

    def append(self, x):
        return _OpenPosePython.IntVectorVectorVector_append(self, x)

    def empty(self):
        return _OpenPosePython.IntVectorVectorVector_empty(self)

    def size(self):
        return _OpenPosePython.IntVectorVectorVector_size(self)

    def swap(self, v):
        return _OpenPosePython.IntVectorVectorVector_swap(self, v)

    def begin(self):
        return _OpenPosePython.IntVectorVectorVector_begin(self)

    def end(self):
        return _OpenPosePython.IntVectorVectorVector_end(self)

    def rbegin(self):
        return _OpenPosePython.IntVectorVectorVector_rbegin(self)

    def rend(self):
        return _OpenPosePython.IntVectorVectorVector_rend(self)

    def clear(self):
        return _OpenPosePython.IntVectorVectorVector_clear(self)

    def get_allocator(self):
        return _OpenPosePython.IntVectorVectorVector_get_allocator(self)

    def pop_back(self):
        return _OpenPosePython.IntVectorVectorVector_pop_back(self)

    def erase(self, *args):
        return _OpenPosePython.IntVectorVectorVector_erase(self, *args)

    def __init__(self, *args):
        this = _OpenPosePython.new_IntVectorVectorVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _OpenPosePython.IntVectorVectorVector_push_back(self, x)

    def front(self):
        return _OpenPosePython.IntVectorVectorVector_front(self)

    def back(self):
        return _OpenPosePython.IntVectorVectorVector_back(self)

    def assign(self, n, x):
        return _OpenPosePython.IntVectorVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _OpenPosePython.IntVectorVectorVector_resize(self, *args)

    def insert(self, *args):
        return _OpenPosePython.IntVectorVectorVector_insert(self, *args)

    def reserve(self, n):
        return _OpenPosePython.IntVectorVectorVector_reserve(self, n)

    def capacity(self):
        return _OpenPosePython.IntVectorVectorVector_capacity(self)
    __swig_destroy__ = _OpenPosePython.delete_IntVectorVectorVector
    __del__ = lambda self: None
IntVectorVectorVector_swigregister = _OpenPosePython.IntVectorVectorVector_swigregister
IntVectorVectorVector_swigregister(IntVectorVectorVector)

class NumpyMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NumpyMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NumpyMatrix, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _OpenPosePython.NumpyMatrix_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _OpenPosePython.NumpyMatrix___nonzero__(self)

    def __bool__(self):
        return _OpenPosePython.NumpyMatrix___bool__(self)

    def __len__(self):
        return _OpenPosePython.NumpyMatrix___len__(self)

    def __getslice__(self, i, j):
        return _OpenPosePython.NumpyMatrix___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _OpenPosePython.NumpyMatrix___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _OpenPosePython.NumpyMatrix___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _OpenPosePython.NumpyMatrix___delitem__(self, *args)

    def __getitem__(self, *args):
        return _OpenPosePython.NumpyMatrix___getitem__(self, *args)

    def __setitem__(self, *args):
        return _OpenPosePython.NumpyMatrix___setitem__(self, *args)

    def pop(self):
        return _OpenPosePython.NumpyMatrix_pop(self)

    def append(self, x):
        return _OpenPosePython.NumpyMatrix_append(self, x)

    def empty(self):
        return _OpenPosePython.NumpyMatrix_empty(self)

    def size(self):
        return _OpenPosePython.NumpyMatrix_size(self)

    def swap(self, v):
        return _OpenPosePython.NumpyMatrix_swap(self, v)

    def begin(self):
        return _OpenPosePython.NumpyMatrix_begin(self)

    def end(self):
        return _OpenPosePython.NumpyMatrix_end(self)

    def rbegin(self):
        return _OpenPosePython.NumpyMatrix_rbegin(self)

    def rend(self):
        return _OpenPosePython.NumpyMatrix_rend(self)

    def clear(self):
        return _OpenPosePython.NumpyMatrix_clear(self)

    def get_allocator(self):
        return _OpenPosePython.NumpyMatrix_get_allocator(self)

    def pop_back(self):
        return _OpenPosePython.NumpyMatrix_pop_back(self)

    def erase(self, *args):
        return _OpenPosePython.NumpyMatrix_erase(self, *args)

    def __init__(self, *args):
        this = _OpenPosePython.new_NumpyMatrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _OpenPosePython.NumpyMatrix_push_back(self, x)

    def front(self):
        return _OpenPosePython.NumpyMatrix_front(self)

    def back(self):
        return _OpenPosePython.NumpyMatrix_back(self)

    def assign(self, n, x):
        return _OpenPosePython.NumpyMatrix_assign(self, n, x)

    def resize(self, *args):
        return _OpenPosePython.NumpyMatrix_resize(self, *args)

    def insert(self, *args):
        return _OpenPosePython.NumpyMatrix_insert(self, *args)

    def reserve(self, n):
        return _OpenPosePython.NumpyMatrix_reserve(self, n)

    def capacity(self):
        return _OpenPosePython.NumpyMatrix_capacity(self)
    __swig_destroy__ = _OpenPosePython.delete_NumpyMatrix
    __del__ = lambda self: None
NumpyMatrix_swigregister = _OpenPosePython.NumpyMatrix_swigregister
NumpyMatrix_swigregister(NumpyMatrix)


def openPosePython(datumToProcess):
    return _OpenPosePython.openPosePython(datumToProcess)
openPosePython = _OpenPosePython.openPosePython

def configure():
    return _OpenPosePython.configure()
configure = _OpenPosePython.configure

def stop():
    return _OpenPosePython.stop()
stop = _OpenPosePython.stop

def setMat(dptr, matData):
    return _OpenPosePython.setMat(dptr, matData)
setMat = _OpenPosePython.setMat

def new_datumsPtr():
    return _OpenPosePython.new_datumsPtr()
new_datumsPtr = _OpenPosePython.new_datumsPtr

def get(dptr):
    return _OpenPosePython.get(dptr)
get = _OpenPosePython.get

def datumsPtr_at(dptr):
    return _OpenPosePython.datumsPtr_at(dptr)
datumsPtr_at = _OpenPosePython.datumsPtr_at

def mat_at(dptr):
    return _OpenPosePython.mat_at(dptr)
mat_at = _OpenPosePython.mat_at

def datumsPtr_empty(dptr):
    return _OpenPosePython.datumsPtr_empty(dptr)
datumsPtr_empty = _OpenPosePython.datumsPtr_empty

def get_pose_keypoints(dptr):
    return _OpenPosePython.get_pose_keypoints(dptr)
get_pose_keypoints = _OpenPosePython.get_pose_keypoints

def emplaceBack(dptr):
    return _OpenPosePython.emplaceBack(dptr)
emplaceBack = _OpenPosePython.emplaceBack

def setCvInputData(dptr, image):
    return _OpenPosePython.setCvInputData(dptr, image)
setCvInputData = _OpenPosePython.setCvInputData

def setInput(dptr, np_image, resolution):
    return _OpenPosePython.setInput(dptr, np_image, resolution)
setInput = _OpenPosePython.setInput

def matToNumpyString(dptr):
    return _OpenPosePython.matToNumpyString(dptr)
matToNumpyString = _OpenPosePython.matToNumpyString

def getElement(w, h, c, dptr):
    return _OpenPosePython.getElement(w, h, c, dptr)
getElement = _OpenPosePython.getElement

def setElement(h, w, c, dptr, value, width, height):
    return _OpenPosePython.setElement(h, w, c, dptr, value, width, height)
setElement = _OpenPosePython.setElement

def initInput(dptr):
    return _OpenPosePython.initInput(dptr)
initInput = _OpenPosePython.initInput

def show(name, dptr):
    return _OpenPosePython.show(name, dptr)
show = _OpenPosePython.show

def matToArray(mat):
    return _OpenPosePython.matToArray(mat)
matToArray = _OpenPosePython.matToArray

def test():
    return _OpenPosePython.test()
test = _OpenPosePython.test
class Datum(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Datum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Datum, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _OpenPosePython.Datum_id_set
    __swig_getmethods__["id"] = _OpenPosePython.Datum_id_get
    if _newclass:
        id = _swig_property(_OpenPosePython.Datum_id_get, _OpenPosePython.Datum_id_set)
    __swig_setmethods__["name"] = _OpenPosePython.Datum_name_set
    __swig_getmethods__["name"] = _OpenPosePython.Datum_name_get
    if _newclass:
        name = _swig_property(_OpenPosePython.Datum_name_get, _OpenPosePython.Datum_name_set)
    __swig_setmethods__["cvInputData"] = _OpenPosePython.Datum_cvInputData_set
    __swig_getmethods__["cvInputData"] = _OpenPosePython.Datum_cvInputData_get
    if _newclass:
        cvInputData = _swig_property(_OpenPosePython.Datum_cvInputData_get, _OpenPosePython.Datum_cvInputData_set)
    __swig_setmethods__["inputNetData"] = _OpenPosePython.Datum_inputNetData_set
    __swig_getmethods__["inputNetData"] = _OpenPosePython.Datum_inputNetData_get
    if _newclass:
        inputNetData = _swig_property(_OpenPosePython.Datum_inputNetData_get, _OpenPosePython.Datum_inputNetData_set)
    __swig_setmethods__["outputData"] = _OpenPosePython.Datum_outputData_set
    __swig_getmethods__["outputData"] = _OpenPosePython.Datum_outputData_get
    if _newclass:
        outputData = _swig_property(_OpenPosePython.Datum_outputData_get, _OpenPosePython.Datum_outputData_set)
    __swig_setmethods__["cvOutputData"] = _OpenPosePython.Datum_cvOutputData_set
    __swig_getmethods__["cvOutputData"] = _OpenPosePython.Datum_cvOutputData_get
    if _newclass:
        cvOutputData = _swig_property(_OpenPosePython.Datum_cvOutputData_get, _OpenPosePython.Datum_cvOutputData_set)
    __swig_setmethods__["poseKeypoints"] = _OpenPosePython.Datum_poseKeypoints_set
    __swig_getmethods__["poseKeypoints"] = _OpenPosePython.Datum_poseKeypoints_get
    if _newclass:
        poseKeypoints = _swig_property(_OpenPosePython.Datum_poseKeypoints_get, _OpenPosePython.Datum_poseKeypoints_set)
    __swig_setmethods__["poseHeatMaps"] = _OpenPosePython.Datum_poseHeatMaps_set
    __swig_getmethods__["poseHeatMaps"] = _OpenPosePython.Datum_poseHeatMaps_get
    if _newclass:
        poseHeatMaps = _swig_property(_OpenPosePython.Datum_poseHeatMaps_get, _OpenPosePython.Datum_poseHeatMaps_set)
    __swig_setmethods__["faceRectangles"] = _OpenPosePython.Datum_faceRectangles_set
    __swig_getmethods__["faceRectangles"] = _OpenPosePython.Datum_faceRectangles_get
    if _newclass:
        faceRectangles = _swig_property(_OpenPosePython.Datum_faceRectangles_get, _OpenPosePython.Datum_faceRectangles_set)
    __swig_setmethods__["faceKeypoints"] = _OpenPosePython.Datum_faceKeypoints_set
    __swig_getmethods__["faceKeypoints"] = _OpenPosePython.Datum_faceKeypoints_get
    if _newclass:
        faceKeypoints = _swig_property(_OpenPosePython.Datum_faceKeypoints_get, _OpenPosePython.Datum_faceKeypoints_set)
    __swig_setmethods__["handRectangles"] = _OpenPosePython.Datum_handRectangles_set
    __swig_getmethods__["handRectangles"] = _OpenPosePython.Datum_handRectangles_get
    if _newclass:
        handRectangles = _swig_property(_OpenPosePython.Datum_handRectangles_get, _OpenPosePython.Datum_handRectangles_set)
    __swig_setmethods__["handKeypoints"] = _OpenPosePython.Datum_handKeypoints_set
    __swig_getmethods__["handKeypoints"] = _OpenPosePython.Datum_handKeypoints_get
    if _newclass:
        handKeypoints = _swig_property(_OpenPosePython.Datum_handKeypoints_get, _OpenPosePython.Datum_handKeypoints_set)
    __swig_setmethods__["scaleInputToOutput"] = _OpenPosePython.Datum_scaleInputToOutput_set
    __swig_getmethods__["scaleInputToOutput"] = _OpenPosePython.Datum_scaleInputToOutput_get
    if _newclass:
        scaleInputToOutput = _swig_property(_OpenPosePython.Datum_scaleInputToOutput_get, _OpenPosePython.Datum_scaleInputToOutput_set)
    __swig_setmethods__["scaleNetToOutput"] = _OpenPosePython.Datum_scaleNetToOutput_set
    __swig_getmethods__["scaleNetToOutput"] = _OpenPosePython.Datum_scaleNetToOutput_get
    if _newclass:
        scaleNetToOutput = _swig_property(_OpenPosePython.Datum_scaleNetToOutput_get, _OpenPosePython.Datum_scaleNetToOutput_set)
    __swig_setmethods__["scaleRatios"] = _OpenPosePython.Datum_scaleRatios_set
    __swig_getmethods__["scaleRatios"] = _OpenPosePython.Datum_scaleRatios_get
    if _newclass:
        scaleRatios = _swig_property(_OpenPosePython.Datum_scaleRatios_get, _OpenPosePython.Datum_scaleRatios_set)
    __swig_setmethods__["elementRendered"] = _OpenPosePython.Datum_elementRendered_set
    __swig_getmethods__["elementRendered"] = _OpenPosePython.Datum_elementRendered_get
    if _newclass:
        elementRendered = _swig_property(_OpenPosePython.Datum_elementRendered_get, _OpenPosePython.Datum_elementRendered_set)

    def __init__(self, *args):
        this = _OpenPosePython.new_Datum(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OpenPosePython.delete_Datum
    __del__ = lambda self: None

    def clone(self):
        return _OpenPosePython.Datum_clone(self)

    def __lt__(self, datum):
        return _OpenPosePython.Datum___lt__(self, datum)

    def __gt__(self, datum):
        return _OpenPosePython.Datum___gt__(self, datum)

    def __le__(self, datum):
        return _OpenPosePython.Datum___le__(self, datum)

    def __ge__(self, datum):
        return _OpenPosePython.Datum___ge__(self, datum)

    def __eq__(self, datum):
        return _OpenPosePython.Datum___eq__(self, datum)

    def __ne__(self, datum):
        return _OpenPosePython.Datum___ne__(self, datum)
Datum_swigregister = _OpenPosePython.Datum_swigregister
Datum_swigregister(Datum)

class datum(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, datum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, datum, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _OpenPosePython.new_datum(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OpenPosePython.delete_datum
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _OpenPosePython.datum___getitem__(self, index)

    def __setitem__(self, index, value):
        return _OpenPosePython.datum___setitem__(self, index, value)

    def cast(self):
        return _OpenPosePython.datum_cast(self)
    if _newclass:
        frompointer = staticmethod(_OpenPosePython.datum_frompointer)
    else:
        frompointer = _OpenPosePython.datum_frompointer
datum_swigregister = _OpenPosePython.datum_swigregister
datum_swigregister(datum)

def datum_frompointer(t):
    return _OpenPosePython.datum_frompointer(t)
datum_frompointer = _OpenPosePython.datum_frompointer

class mat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mat, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _OpenPosePython.new_mat(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OpenPosePython.delete_mat
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _OpenPosePython.mat___getitem__(self, index)

    def __setitem__(self, index, value):
        return _OpenPosePython.mat___setitem__(self, index, value)

    def cast(self):
        return _OpenPosePython.mat_cast(self)
    if _newclass:
        frompointer = staticmethod(_OpenPosePython.mat_frompointer)
    else:
        frompointer = _OpenPosePython.mat_frompointer
mat_swigregister = _OpenPosePython.mat_swigregister
mat_swigregister(mat)

def mat_frompointer(t):
    return _OpenPosePython.mat_frompointer(t)
mat_frompointer = _OpenPosePython.mat_frompointer

class ucharMat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ucharMat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ucharMat, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _OpenPosePython.new_ucharMat(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OpenPosePython.delete_ucharMat
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _OpenPosePython.ucharMat___getitem__(self, index)

    def __setitem__(self, index, value):
        return _OpenPosePython.ucharMat___setitem__(self, index, value)

    def cast(self):
        return _OpenPosePython.ucharMat_cast(self)
    if _newclass:
        frompointer = staticmethod(_OpenPosePython.ucharMat_frompointer)
    else:
        frompointer = _OpenPosePython.ucharMat_frompointer
ucharMat_swigregister = _OpenPosePython.ucharMat_swigregister
ucharMat_swigregister(ucharMat)

def ucharMat_frompointer(t):
    return _OpenPosePython.ucharMat_frompointer(t)
ucharMat_frompointer = _OpenPosePython.ucharMat_frompointer

class DatumsPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatumsPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DatumsPtr, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _OpenPosePython.new_DatumsPtr()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OpenPosePython.delete_DatumsPtr
    __del__ = lambda self: None
DatumsPtr_swigregister = _OpenPosePython.DatumsPtr_swigregister
DatumsPtr_swigregister(DatumsPtr)

class Mat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mat, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _OpenPosePython.new_Mat(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _OpenPosePython.delete_Mat
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _OpenPosePython.Mat___getitem__(self, index)

    def __setitem__(self, index, value):
        return _OpenPosePython.Mat___setitem__(self, index, value)

    def cast(self):
        return _OpenPosePython.Mat_cast(self)
    if _newclass:
        frompointer = staticmethod(_OpenPosePython.Mat_frompointer)
    else:
        frompointer = _OpenPosePython.Mat_frompointer
Mat_swigregister = _OpenPosePython.Mat_swigregister
Mat_swigregister(Mat)

def Mat_frompointer(t):
    return _OpenPosePython.Mat_frompointer(t)
Mat_frompointer = _OpenPosePython.Mat_frompointer

# This file is compatible with both classic and new-style classes.


